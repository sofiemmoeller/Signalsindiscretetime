%Generating the clean signal
[time_vector, clean_signal] = generate_sinusoid(A, f, phi, fs, T_s);

%Function:
function [time_vector, signal] = generate_sinusoid(A, f, phi, fs, T_s)
    % Time vector
    time_vector = 0:1/fs:T_s-1/fs; 

    % The signal
    signal = A * cos(2 * pi * f * time_vector + phi * 2 * pi);
end

n = randn(fs*T_s, 1);     %White noise --> a random vector

%Length of the vector
len_n_samples = length(n);      %in samples
len_n_s = length(n) / fs;       %in time

% Calculateing the frequency vector
T0 = length(n) / fs;            % duration of the signal in seconds
delta_f = 1 / T0;               % frequency resolution

% get the positive frequencies first
f_pos = 0:delta_f:fs/2;         % Nyquist theorem --> positive frequencies up to fs/2
f_neg = -fs/2+delta_f:delta_f:-delta_f;  % negative frequencies from -fs/2 to 0

% Now we calculate the spectrum of our signal and plot it on a meaningful axis!
Y = fft(n);                     % Compute the FFT of the signal

% Take only positive frequencies (single-sided spectrum)
Y_pos = Y(1:floor(length(Y)/2) + 1);  % Only positive part of the spectrum

function [Y, freq] = spectrum(signal, fs)
    Y = fft(signal);
    Y = Y / length(Y);    

    %Frequency resolution
    N = length(signal);           % Number of samples
    T0 = N / fs;                  % Duration of signal in seconds
    delta_f = 1 / T0;             % Frequency resolution

    if mod(N, 2) == 0
        %even number:
        f_pos = 0:delta_f:fs/2;    %Positive frequencies up to fs/2
        f_neg = -fs/2+delta_f:delta_f:-delta_f; %Negative frequencies to -f/s
    else
        %odd number:
        f_pos = 0:delta_f:(floor(N/2) * delta_f); %Up to just below Nyquist
        f_neg = -(floor(N/2)) * delta_f:delta_f:-delta_f; %Negative frequencies
    end

    freq = [f_pos f_neg];

    Y = Y(:);
    freq = freq(:);
end

%Parameters for the clean signal
A = 1;           % Amplitude
f = 1000;        % Frequency in Hz
phi = 0;         % Phase
fs = 10000;      % Sampling frequency
T0 = 0.5;         % Duration in seconds    F0 = 1/T0 = 2 Hz, which give us T0 = 0.5


% Generate and plot a sinusoidal signal
[x_values, y_values] = generate_sinusoid(A, f, phi, fs, T0);

% Using the make_spectrum function
[Y, freq] = spectrum(y_values, fs);

stem(freq, abs(Y), 'm', 'LineWidth', 1.5, 'MarkerFaceColor', 'b', 'MarkerSize', 6)
xlim([-fs/2 fs/2])
xlabel('frequency / Hz')
ylabel('magnitude / dB')
title('Stem-plot: Spectrum of Sinusoid');
xlim([-3000 3000])
ylim([-0.005 0.500])


figure;
plot(freq, 20*log10(abs(Y)));
xlabel('Frequency / Hz');
ylabel('Magnitude / dB');
title('Spectrum of 1000 Hz Sinusoid with white noise');
xlim([-3000 3000])
grid on;

close all
audioinfo('optagelse_4.wav')
my_signal = audioread('optagelse_4.wav');


if size(my_signal, 2) == 2
    signal = mean(signal, 2);
end

fs = 48000;  % Sample rate
duration = 0.5;  %Duration of signal
num_samples = length(my_signal);  %Samples from my recording
t = linspace(0, duration, num_samples);  %Time-vector

plot(t, my_signal);  %Signal in the time domain
title('My own recording in time domain');
xlabel('Time (s)');
ylabel('Amplitude');

fs = 48000;  % Sampling rate
num_samples = fs * 0.5;  % 0.5-second duration (24,000 samples)

% Extract the last 24,000 samples for analysis
signal_section = my_signal(end-num_samples+1:end);  % Last 0.5-second section

% Function to perform FFT, shift, and generate frequency axis
function [freq, X_shifted] = compute_fft(signal_section, fs)
    X = fft(signal_section) / length(signal_section);  % Perform Fourier transform and normalize
    X_shifted = fftshift(X);  % Shift frequency components
    delta_f = fs / length(signal_section);  % Frequency resolution
    freq = -fs/2:delta_f:(fs/2 - delta_f);  % Generate frequency axis
end

% Compute FFT for the selected section (last 0.5 seconds)
[freq, X_shifted] = compute_fft(signal_section, fs);

% Plot the stem plot for the selected section (0.5 seconds)
figure;
stem(freq, 25 * abs(X_shifted), 'MarkerFaceColor', 'b', 'MarkerSize', 3);
xlim([-3000 3000]);  % Limit frequency axis
ylim([-0.100 0.500]);  % Limit magnitude axis
xlabel('Frequency (Hz)');
ylabel('Magnitude');
title('Stem Plot of my recording');
grid on;

% Limit the frequency range for the magnitude spectrum plot
freq_limited = freq(freq >= -3000 & freq <= 3000);
X_limited = X_shifted(freq >= -3000 & freq <= 3000);

% Plot the magnitude spectrum (in dB)
figure;
plot(freq_limited, 20*log10(abs(X_limited)));  % Use plot for magnitude spectrum
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');
title('Magnitude Spectrum of my recording');
grid on;
xlim([-3000 3000]);  % Limit the frequency axis

%% Fourier transformation of the recorded signal (DFT of the signal)
fs = 48000;  % Sampling rate for the recorded signal

% Extract the last 8000 samples from the recorded signal
signal_section = my_signal(end-8000+1:end);

% Calculate duration and frequency resolution for the recorded signal
duration = length(signal_section) / fs;
delta_f = 1 / duration;  % Frequency resolution
X = fft(signal_section) / length(signal_section);  % Perform FFT and normalize by signal length
X = fftshift(X);  % Shift the FFT result so that zero frequency is at the center

% Create a frequency vector for the recorded signal
freq = -fs/2:delta_f:(fs/2 - delta_f);

%% Parameters for the pure sinusoidal signal
A = 1;           % Amplitude of the sinusoid
f = 1000;        % Frequency in Hz
phi = 0;         % Phase in radians
fs_sin = 48000;  % Sampling frequency for the sinusoidal signal (same as the recorded signal)
T0 = 0.5;       % Duration of the sinusoidal signal (matching the recorded signal)

% Generate the time axis for the sinusoidal signal
t_sin = 0:1/fs_sin:T0-1/fs_sin;

% Create the sinusoidal signal using the given parameters
y_values = A * sin(2 * pi * f * t_sin + phi);

% Calculate the Fourier transform of the sinusoidal signal
Y = fft(y_values) / length(y_values);  % Perform FFT and normalize
Y = fftshift(Y);  % Shift the FFT result to center the frequency at zero

% Create a frequency vector for the sinusoidal signal
freq_sin = linspace(-fs_sin/2, fs_sin/2, length(Y));

%% Plot both spectra in the same figure with different colors
figure;

% Plot the spectrum of the recorded signal in blue
stem(freq, 25 * abs(X), 'b', 'LineWidth', 1.5);  % Blue color for the recorded signal
hold on;

% Plot the spectrum of the sinusoidal signal in red
stem(freq_sin, abs(Y), 'm', 'LineWidth', 1.5);  % Red color for the sinusoidal signal

% Add labels to the axes and a title for the plot
xlabel('Frequency (Hz)');
ylabel('Magnitude');
title('Stemplot: Spectrum of Recorded Signal and Pure Sinusoidal Signal');
grid on;  % Display gridlines for clarity

% Set the x-axis limits to focus on the desired frequency range
xlim([-3000 3000]);

% Add a legend to differentiate the two signals
legend('Recorded Signal', 'Sinusoidal Signal');

hold off;  % Release the hold on the plot to finalize


%% Plotting the spectrum of the sinusoidal and recorded signals
% This script ensures both signals have the same frequency vector length before plotting

% Step 1: Calculate the spectrum for the sinusoidal signal
figure;

% If the frequency vector length doesn't match the length of Y, recalculate it
if length(freq) ~= length(Y)
    freq_clean = linspace(-fs/2, fs/2, length(Y));  % Generate a new frequency vector for the sinusoidal signal
else
    freq_clean = freq;  % Use the original frequency vector if they are the same length
end

% Plot the sinusoidal signal spectrum using a red line
plot(freq_clean, 20*log10(abs(Y)), 'm', 'LineWidth', 1.5);  % 'r' stands for red color
hold on;  % Keep the plot open for additional signals

% Step 2: Check the recorded signal and ensure frequency vector matches
% If the recorded signal's frequency vector length doesn't match, recalculate it
if length(freq) ~= length(X)
    freq_recorded = linspace(-fs/2, fs/2, length(X));  % Generate a new frequency vector for the recorded signal
else
    freq_recorded = freq;  % Use the original frequency vector if they are already the same
end

% Plot the recorded signal spectrum using a blue line
plot(freq_recorded, 20*log10(abs(X)), 'b', 'LineWidth', 1.5);  % 'b' stands for blue color

% Step 3: Add axis labels and title to the plot
xlabel('Frequency (Hz)');  % Label for the x-axis representing the frequency
ylabel('Magnitude (dB)');  % Label for the y-axis representing the magnitude in decibels
title('Spectrum of Sinusoidal Signal and Recorded Signal');  % Title of the plot
grid on;  % Add gridlines to the plot for better readability

% Step 4: Set the limits for the x-axis to show only the relevant frequency range
xlim([-3000 3000]);  % Focus on frequencies between -3000 and 3000 Hz

% Step 5: Add a legend to differentiate between the two signals
legend('Sinusoidal Signal', 'Recorded Signal');  % Legend to clarify which plot is which

% Finalize the plot
hold off;  % Release the hold on the plot so no further plots are added
